install.packages("swirl")
?switch
install.packages("swirl")
library("swirl", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
swirl()
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class
)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, funtion(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply((flags, unique, numeric(1)))
ok()
sapply((flags, class)
ok()
sapply(flags, class)
vapply(flags, unique, character(1))
ok()
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
library(datasets)
data("iris")
?iris
tapply(iris$Sepal.Length, mean)
head(iris)
specie <- iris[, "Species"]
specie <- iris[, "Sepal.Length" Species"]
specie <- iris[, "Sepal.Length" "Species"]
specie <- iris[, "Sepal.Length", "Species"]
lapply(iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, mean)
lapply(iris$Sepal.Length, mean, iris$Species = virginica)
lapply(iris$Sepal.Length, mean, iris$Species virginica)
lapply(iris$Sepal.Length, mean, virginica)
lapply(iris$Sepal.Length, mean, iris["Species"])
virginica <- split(iris, iris$Species)
virginica
lapply(virginica, mean)
lapply(virginica, mean, rm.na =TRUE)
lapply(virginica, mean, rm.na ==TRUE)
lapply(virginica, mean, rm.na == TRUE)
lapply(virginica, mean)
sapply(virginica, function(x){}
sapply(virginica, function(x){}
sapply(virginica, function(x){}
)
sapply(virginica, function(x){  }
colMeans(c, na.rm = NA)}
sapply(virginica, function(x){ colMeans( x, "virginica") })
lapply(virginica, function(x){ colMeans( x, "virginica") })
lapply(virginica, function(x){ colMeans( x, na.rm = TRUE) })
sapply(virginica, function(x){ colMeans( x, na.rm = TRUE) })
species <- iris[, "Species"]
head(species)
species <- iris[, "Sepal.Length" "Species"]
species <- iris[, "Sepal.Length", "Species"]
species <- iris[,c("Sepal.Length", "Species")]
head(species)
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data("mtcars")
?mtcars
?with
with(mtcars, tapply(mpg,cyl,mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls
ls()
close
Q()
Q
12*8
Q
Q
Q
setwd("~/ProgrammingAssignment2")
source("cachematrix.R")
m <- matrix(runif(25), 5,5)
m <-makeCacheMatrix(m)
cacheSolve()
cacheSolve(m)
source("cachematrix.R")
m <- matrix(runif(25), 5,5)
m <-makeCacheMatrix(m)
cacheSolve(m)
m <- matrix(runif(1:25), 5,5)
m <-makeCacheMatrix(m)
cacheSolve(m)
m
head.matrix(m)
head(m)
m <- matrix(runif(1:25),5,5)
m
m <-makeCacheMatrix(m)
cacheSolve(m)
ma <- matrix(runif(1:25), 5,5)
m <-makeCacheMatrix(ma)
cacheSolve(m)
cacheSolve(m)
source("cachematrix.R")
ma <- matrix
ma <- matrix(runif(1:25),5,5)
m <-makeCacheMatrix(ma)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
source("cachematrix.R")
m <-makeCacheMatrix(ma)
ma <- matrix(runif(1:25),5,5)
m <-makeCacheMatrix(ma)
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
m <-makeCacheMatrix(ma)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
cacheSolve(m)
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
ma <- matrix(runif(1:25),5,5)
m <-makeCacheMatrix(ma)
cacheSolve(m)
class(get())
class(get
)
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
